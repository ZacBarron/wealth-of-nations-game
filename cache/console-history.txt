(async () => {  const [signer] = await ethers.getSigners();  console.log("Using signer address:", await signer.getAddress());  const abi = [    "function tokenURI(uint256 tokenId) view returns (string)",    "function setBaseURI(string memory baseURI)",    "function owner() view returns (address)"  ];    const contract = await ethers.getContractAt(abi, "0x6B5A3Ed3aDF90Bc5aD32365F1b8683DDed2B4337", signer);    console.log('Setting new base URI...');  // Note: No trailing slash after ipfs://  const tx = await contract.setBaseURI("ipfs://bafkreigik42m7kgjpyuv3gagclure6c47hmcuqdfjnjkz3eqpuhwunw6aa0");  console.log('Transaction hash:', tx.hash);    console.log('Waiting for confirmation...');  await tx.wait();    const newUri = await contract.tokenURI(0);  console.log('New token URI:', newUri);})()
npx hardhat console --network arbitrumSepolia
(async () => {  const [signer] = await ethers.getSigners();  console.log("Using signer address:", await signer.getAddress());  const abi = [    "function tokenURI(uint256 tokenId) view returns (string)",    "function setBaseURI(string memory baseURI)",    "function owner() view returns (address)"  ];    const contract = await ethers.getContractAt(abi, "0x6B5A3Ed3aDF90Bc5aD32365F1b8683DDed2B4337", signer);    const owner = await contract.owner();  console.log('Contract owner:', owner);  console.log('Current signer:', await signer.getAddress());  if (owner.toLowerCase() === (await signer.getAddress()).toLowerCase()) {    console.log('Setting new base URI...');    const tx = await contract.setBaseURI("ipfs://bafkreigik42m7kgjpyuv3gagclure6c47hmcuqdfjnjkz3eqpuhwunw6aa");    console.log('Transaction hash:', tx.hash);        console.log('Waiting for confirmation...');    await tx.wait();        const newUri = await contract.tokenURI(0);    console.log('New token URI:', newUri);  } else {    console.log('Current signer is not the contract owner!');  }})()
(async () => {  const [signer] = await ethers.getSigners();  console.log("Using signer address:", await signer.getAddress());  const abi = [    "function tokenURI(uint256 tokenId) view returns (string)",    "function setTokenURI(uint256 tokenId, string memory _tokenURI)"  ];    const contract = await ethers.getContractAt(abi, "0x6B5A3Ed3aDF90Bc5aD32365F1b8683DDed2B4337", signer);    console.log('Setting new token URI...');  const tx = await contract.setTokenURI(0, "ipfs://bafkreigik42m7kgjpyuv3gagclure6c47hmcuqdfjnjkz3eqpuhwunw6aa");  console.log('Transaction hash:', tx.hash);    console.log('Waiting for confirmation...');  await tx.wait();    const newUri = await contract.tokenURI(0);  console.log('New token URI:', newUri);})()
(async () => {  const abi = [    "function tokenURI(uint256 tokenId) view returns (string)",    "function setTokenURI(uint256 tokenId, string memory _tokenURI)"  ];  const contract = await ethers.getContractAt(abi, "0x6B5A3Ed3aDF90Bc5aD32365F1b8683DDed2B4337");    // Set the correct URI  console.log('Setting new token URI...');  const tx = await contract.setTokenURI(0, "ipfs://bafkreigik42m7kgjpyuv3gagclure6c47hmcuqdfjnjkz3eqpuhwunw6aa");  await tx.wait();    // Verify the update  const newUri = await contract.tokenURI(0);  console.log('New token URI:', newUri);})()
(async () => {  const abi = ["function tokenURI(uint256 tokenId) view returns (string)"];  const contract = await ethers.getContractAt(abi, "0x6B5A3Ed3aDF90Bc5aD32365F1b8683DDed2B4337");  const uri = await contract.tokenURI(0);  console.log('Token URI:', uri);})()
npx hardhat console --network arbitrumSepolia
const uri = await contract.tokenURI(0);
const contract = await ethers.getContractAt(abi, "0x6B5A3Ed3aDF90Bc5aD32365F1b8683DDed2B4337");
const abi = ["function tokenURI(uint256 tokenId) view returns (string)"];
npx hardhat compile
const uri = await contract.tokenURI(0);
const contract = await ethers.getContractAt("WealthOfNationsStarterPack", "0x6B5A3Ed3aDF90Bc5aD32365F1b8683DDed2B4337");